name: "Aplicar pagamentos via Issue"

on:
  issues:
    types: [opened, edited, labeled]
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: read

env:
  PAGES_URL: https://acaciocs.github.io/natal-2025/

jobs:
  add:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Processar issue e aplicar pagamentos
        id: run
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const issue_number = context.payload.issue ? context.payload.issue.number
                                  : context.payload.comment ? context.payload.issue.number
                                  : null;
            if (!issue_number) { core.setFailed('Sem número da issue.'); return; }
            const { data: issue } = await github.rest.issues.get({ owner, repo, issue_number });
            const labels = issue.labels.map(l => (typeof l === 'string' ? l : l.name));
            if (!labels.includes('add-payment')) { core.setFailed('Falta label add-payment.'); return; }
            const body = issue.body || '';
            // Extrai bloco de linhas (tudo)
            const lines = body.split(/\r?\n/).map(s => s.trim()).filter(Boolean).filter(s => !s.startsWith('#'));
            if (!fs.existsSync('data.json')) { core.setFailed('data.json não encontrado no repo.'); return; }
            const data = JSON.parse(fs.readFileSync('data.json','utf8'));
            const norm = s => (s||'').normalize('NFD').replace(/[\u0300-\u036f]/g,'').toLowerCase().trim();
            const validCats = new Set(['entrada20','restante80','comesBebes','decoracao']);
            let applied = [];
            for (const raw of lines){
              if (!raw.includes('|')) continue;
              const [a,b,c] = raw.split('|').map(x => (x||'').trim());
              if (!a || !b || !c) continue;
              const cat = b;
              if (!validCats.has(cat)) { applied.push(`❌ Categoria inválida: ${cat} (${raw})`); continue; }
              let valor = c.replace(',','.');
              valor = Number(valor);
              if (!isFinite(valor)) { applied.push(`❌ Valor inválido: ${c} (${raw})`); continue; }
              let p = null;
              if (/^\d+$/.test(a)){ // id
                const id = Number(a);
                p = data.participants.find(x => x.id === id);
              } else { // nome (ignora acentos)
                const key = norm(a);
                p = data.participants.find(x => norm(x.nome) === key);
                if (!p) { // tenta contém
                  p = data.participants.find(x => norm(x.nome).includes(key));
                }
              }
              if (!p){ applied.push(`❌ Participante não encontrado: ${a}`); continue; }
              if (!p.pagamentos) p.pagamentos = {entrada20:0,restante80:0,comesBebes:0,decoracao:0};
              p.pagamentos[cat] = Number((p.pagamentos[cat]||0) + valor);
              applied.push(`✅ ${p.nome} • ${cat} += ${valor.toFixed(2)}`);
            }
            fs.writeFileSync('data.json', JSON.stringify(data, null, 2), 'utf8');
            core.setOutput('applied', applied.join('\n'));

      - name: Commit & push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data.json
          if git diff --cached --quiet; then
            echo "Nada a commitar."
          else
            git commit -m "chore(payments): applied via issue"
            git push
          fi

      - name: Comentar resultado na issue
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const issue_number = context.payload.issue ? context.payload.issue.number
                                  : context.payload.comment ? context.payload.issue.number
                                  : null;
            const out = core.getInput('result') || '';
            const body = `### Resultado\n${steps.run.outputs.applied || '(sem linhas válidas)'}\n\nAcompanhar: ${process.env.PAGES_URL}`;
            await github.rest.issues.createComment({ owner, repo, issue_number, body });
