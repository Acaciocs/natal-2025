name: "Aplicar pagamentos via Issue"

on:
  issues:
    types: [opened, edited, labeled]
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: write

env:
  # üîß Troque pela URL do SEU GitHub Pages
  PAGES_URL: https://SEU_USUARIO.github.io/natal-familia-2025/

concurrency:
  group: data-json
  cancel-in-progress: false

jobs:
  add:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Processar issue e aplicar pagamentos
        id: run
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            const issue_number = context.payload.issue?.number;
            if (!issue_number) {
              core.setFailed('N√£o identifiquei o n√∫mero da issue.');
              return;
            }

            // Carrega a issue completa
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
            });

            // Verifica label obrigat√≥rio
            const labels = (issue.labels || []).map(l => typeof l === 'string' ? l : l.name);
            if (!labels.includes('add-payment')) {
              core.setFailed('Falta o label obrigat√≥rio "add-payment" nesta issue.');
              return;
            }

            // data.json precisa existir
            if (!fs.existsSync('data.json')) {
              core.setFailed('data.json n√£o encontrado na raiz do reposit√≥rio.');
              return;
            }
            const data = JSON.parse(fs.readFileSync('data.json', 'utf8'));

            const norm = s => (s || '')
              .normalize('NFD').replace(/[\u0300-\u036f]/g, '')
              .toLowerCase().trim();

            const validCats = new Set(['entrada20','restante80','comesBebes','decoracao']);

            // Coleta linhas do corpo (aceita com ou sem bloco de c√≥digo)
            const text = (issue.body || '').replace(/\r/g, '');
            let codeBlock = null;
            let m = text.match(/```(?:[a-z]*)\n([\s\S]*?)```/i);
            if (m && m[1]) {
              codeBlock = m[1];
            }
            const source = codeBlock || text;

            const lines = source
              .split('\n')
              .map(s => s.trim())
              .filter(Boolean)
              .filter(s => !s.startsWith('#'))
              .filter(s => s.includes('|'));

            let applied = [];
            for (const raw of lines) {
              const parts = raw.split('|').map(x => (x || '').trim());
              if (parts.length < 3) { applied.push(`‚ùå Formato inv√°lido: ${raw}`); continue; }

              const idOrName = parts[0];
              const cat = parts[1];
              let valStr = parts.slice(2).join('|'); // permite valor com '|', se algu√©m errar
              valStr = valStr.replace(',', '.');

              if (!validCats.has(cat)) { applied.push(`‚ùå Categoria inv√°lida: ${cat} (${raw})`); continue; }

              const valor = Number(valStr);
              if (!isFinite(valor)) { applied.push(`‚ùå Valor inv√°lido: ${valStr} (${raw})`); continue; }

              // Localiza participante por id OU por nome (exata, depois cont√©m)
              let p = null;
              if (/^\d+$/.test(idOrName)) {
                const id = Number(idOrName);
                p = (data.participants || []).find(x => x.id === id);
              } else {
                const key = norm(idOrName);
                p = (data.participants || []).find(x => norm(x.nome) === key);
                if (!p) p = (data.participants || []).find(x => norm(x.nome).includes(key));
              }
              if (!p) { applied.push(`‚ùå Participante n√£o encontrado: ${idOrName}`); continue; }

              // Garante objeto pagamentos
              if (!p.pagamentos) {
                p.pagamentos = {entrada20:0,restante80:0,comesBebes:0,decoracao:0};
              }
              p.pagamentos[cat] = Number((p.pagamentos[cat] || 0) + valor);
              applied.push(`‚úÖ ${p.nome} ‚Ä¢ ${cat} += ${valor.toFixed(2)}`);
            }

            // Salva de volta
            fs.writeFileSync('data.json', JSON.stringify(data, null, 2), 'utf8');
            core.setOutput('applied', applied.join('\n'));

      - name: Commit & Push
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data.json
          if git diff --cached --quiet; then
            echo "Nada a commitar (data.json n√£o mudou)."
          else
            git commit -m "chore(payments): applied via issue #${{ github.event.issue.number }}"
            git push
          fi

      - name: Comentar resultado na issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          applied: ${{ steps.run.outputs.applied }}
          script: |
            const issue_number = context.payload.issue?.number;
            const applied = core.getInput('applied') || '(sem linhas v√°lidas)';
            const body = `### Resultado\n${applied}\n\nAcompanhar: ${process.env.PAGES_URL}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              body,
            });

      - name: Comentar falha (se houver)
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.payload.issue?.number;
            const body = `‚ùå Falhou ao aplicar pagamentos.\nConfira os logs em **Actions**, corrija a issue e edite novamente.`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              body,
            });
